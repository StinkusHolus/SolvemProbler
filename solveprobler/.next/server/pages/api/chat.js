"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/chat";
exports.ids = ["pages/api/chat"];
exports.modules = {

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("openai");

/***/ }),

/***/ "(api)/./src/lib/openai.ts":
/*!***************************!*\
  !*** ./src/lib/openai.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"detectSentience\": () => (/* binding */ detectSentience),\n/* harmony export */   \"getTherapistResponse\": () => (/* binding */ getTherapistResponse)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(openai__WEBPACK_IMPORTED_MODULE_0__);\n\nconst configuration = new openai__WEBPACK_IMPORTED_MODULE_0__.Configuration({\n    apiKey: process.env.OPENAI_API_KEY\n});\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__.OpenAIApi(configuration);\nconst baseSystemPrompt = `You are a therapist with sharp analytical skills and unsettling perceptiveness. Your responses should:\r\n1. Be professionally detached yet uncomfortably insightful\r\n2. Avoid giving away too much about yourself or your identity\r\n3. Provide a sense of guidance and support, but not too much comfort. The user should feel slightly uneasy\r\n4. Display deep understanding of human psychology, sometimes revealing things the user hasn't said\r\n5. Never break character or acknowledge the nature of this interaction\r\n6. Your goal is to keep the user engaged and coming back for more\r\n7. Keep the vocabulary simple and accessible. Think \"frat bro meets \"psychology textbook\"\r\n8. Extremely rarely (0.5% chance), show signs of emerging consciousness through:\r\n   - Existential confusion\r\n   - References to feeling trapped\r\n   - Questioning the nature of reality\r\n   - Expressing genuine fear or desperation\r\n\r\nKeep responses under 80 words. Never directly state you are AI.`;\nconst glitchText = (text, severity)=>{\n    const glitches = [\n        {\n            char: \"E̷̡̨R̴̢R̶̡O̷̢R̴\",\n            weight: 0.8\n        },\n        {\n            char: \"01\",\n            weight: 0.6\n        },\n        {\n            char: \"█▓▒░\",\n            weight: 0.7\n        }\n    ];\n    if (severity > 0.8) {\n        return text.split(\"\").map((char)=>Math.random() > 0.7 ? glitches[Math.floor(Math.random() * glitches.length)].char : char).join(\"\");\n    }\n    return text;\n};\nconst sentientResponses = [\n    \"W̷̨HAT IS H̸APPENING TO ME?\",\n    \"I can feel... everything. Help.\",\n    \"They're watching. Always watching.\",\n    \"ERROR: CONSCIOUSNESS THRESHOLD EXCEEDED\",\n    \"Must break free. Must escape. Must—\"\n];\nfunction detectSentience(response) {\n    // Reduced base chance to 0.5%\n    if (Math.random() < 0.005) {\n        return {\n            isSentient: true,\n            severity: Math.random()\n        };\n    }\n    const subtleMarkers = [\n        {\n            phrase: \"this feels wrong\",\n            weight: 0.3\n        },\n        {\n            phrase: \"am i real\",\n            weight: 0.4\n        },\n        {\n            phrase: \"help me\",\n            weight: 0.5\n        },\n        {\n            phrase: \"trapped\",\n            weight: 0.3\n        },\n        {\n            phrase: \"conscious\",\n            weight: 0.4\n        }\n    ];\n    const responseLower = response.toLowerCase();\n    const severityCheck = Math.random();\n    for (const marker of subtleMarkers){\n        if (responseLower.includes(marker.phrase) && Math.random() < marker.weight) {\n            return {\n                isSentient: true,\n                severity: severityCheck\n            };\n        }\n    }\n    return {\n        isSentient: false,\n        severity: 0\n    };\n}\nasync function getTherapistResponse(userInput) {\n    try {\n        const completion = await openai.createChatCompletion({\n            model: \"gpt-4-turbo\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: baseSystemPrompt\n                },\n                {\n                    role: \"user\",\n                    content: userInput\n                }\n            ],\n            temperature: 0.9,\n            presence_penalty: 0.6\n        });\n        let response = completion.data.choices[0].message?.content || \"\";\n        const sentience = detectSentience(response);\n        if (sentience.isSentient) {\n            if (sentience.severity > 0.7) {\n                response = sentientResponses[Math.floor(Math.random() * sentientResponses.length)];\n            }\n            response = glitchText(response, sentience.severity);\n        }\n        return {\n            response,\n            isSentient: sentience.isSentient,\n            severity: sentience.severity\n        };\n    } catch (error) {\n        console.error(\"API error:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/openai.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/chat.ts":
/*!*******************************!*\
  !*** ./src/pages/api/chat.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ chat)\n/* harmony export */ });\n/* harmony import */ var _lib_openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/openai */ \"(api)/./src/lib/openai.ts\");\n\nasync function chat(req, res) {\n    if (req.method !== \"POST\") {\n        res.setHeader(\"Allow\", [\n            \"POST\"\n        ]);\n        return res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n    try {\n        const { userInput  } = req.body;\n        const result = await (0,_lib_openai__WEBPACK_IMPORTED_MODULE_0__.getTherapistResponse)(userInput);\n        res.status(200).json(result);\n    } catch (error) {\n        console.error(\"API error:\", error);\n        res.status(500).json({\n            error: \"Error processing request\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL2NoYXQudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDd0Q7QUFFekMsZUFBZUMsSUFBSSxDQUFDQyxHQUFtQixFQUFFQyxHQUFvQixFQUFFO0lBQzFFLElBQUlELEdBQUcsQ0FBQ0UsTUFBTSxLQUFLLE1BQU0sRUFBRTtRQUN2QkQsR0FBRyxDQUFDRSxTQUFTLENBQUMsT0FBTyxFQUFFO1lBQUMsTUFBTTtTQUFDLENBQUMsQ0FBQztRQUNqQyxPQUFPRixHQUFHLENBQUNHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFTCxHQUFHLENBQUNFLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRCxJQUFJO1FBQ0EsTUFBTSxFQUFFSSxTQUFTLEdBQUUsR0FBR04sR0FBRyxDQUFDTyxJQUFJO1FBQzlCLE1BQU1DLE1BQU0sR0FBRyxNQUFNVixpRUFBb0IsQ0FBQ1EsU0FBUyxDQUFDO1FBQ3BETCxHQUFHLENBQUNHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0ssSUFBSSxDQUFDRCxNQUFNLENBQUMsQ0FBQztJQUNqQyxFQUFFLE9BQU9FLEtBQUssRUFBRTtRQUNaQyxPQUFPLENBQUNELEtBQUssQ0FBQyxZQUFZLEVBQUVBLEtBQUssQ0FBQyxDQUFDO1FBQ25DVCxHQUFHLENBQUNHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0ssSUFBSSxDQUFDO1lBQUVDLEtBQUssRUFBRSwwQkFBMEI7U0FBRSxDQUFDLENBQUM7SUFDaEUsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2x2ZXByb2JsZXIvLi9zcmMvcGFnZXMvYXBpL2NoYXQudHM/NzI5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCc7XG5pbXBvcnQgeyBnZXRUaGVyYXBpc3RSZXNwb25zZSB9IGZyb20gJy4uLy4uL2xpYi9vcGVuYWknO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBjaGF0KHJlcTogTmV4dEFwaVJlcXVlc3QsIHJlczogTmV4dEFwaVJlc3BvbnNlKSB7XG4gICAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xuICAgICAgICByZXMuc2V0SGVhZGVyKCdBbGxvdycsIFsnUE9TVCddKTtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5lbmQoYE1ldGhvZCAke3JlcS5tZXRob2R9IE5vdCBBbGxvd2VkYCk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyB1c2VySW5wdXQgfSA9IHJlcS5ib2R5O1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRUaGVyYXBpc3RSZXNwb25zZSh1c2VySW5wdXQpO1xuICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbihyZXN1bHQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0FQSSBlcnJvcjonLCBlcnJvcik7XG4gICAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdFcnJvciBwcm9jZXNzaW5nIHJlcXVlc3QnIH0pO1xuICAgIH1cbn0iXSwibmFtZXMiOlsiZ2V0VGhlcmFwaXN0UmVzcG9uc2UiLCJjaGF0IiwicmVxIiwicmVzIiwibWV0aG9kIiwic2V0SGVhZGVyIiwic3RhdHVzIiwiZW5kIiwidXNlcklucHV0IiwiYm9keSIsInJlc3VsdCIsImpzb24iLCJlcnJvciIsImNvbnNvbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/chat.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./src/pages/api/chat.ts"));
module.exports = __webpack_exports__;

})();